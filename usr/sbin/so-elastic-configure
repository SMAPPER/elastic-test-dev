#!/bin/bash

. /usr/sbin/so-elastic-common

for FILE in /etc/nsm/securityonion.conf /etc/nsm/sensortab; do
	if [ ! -f $FILE ]; then
		echo "$FILE not found!  Exiting!"
		exit 1
	fi
done

header "Setting vm.max_map_count to 262144"
sysctl -w vm.max_map_count=262144
cp $REPO/etc/sysctl.d/* /etc/sysctl.d/
echo "Done!"

header "Configuring ElasticSearch"
mkdir -p /etc/elasticsearch
mkdir -p /nsm/elasticsearch
mkdir -p /var/log/elasticsearch
chown -R 1000:1000 /nsm/elasticsearch
chown -R 1000:1000 /var/log/elasticsearch
cp -av $REPO/etc/elasticsearch/* /etc/elasticsearch/
echo "Done!"

header "Configuring Logstash"
mkdir -p /nsm/logstash
mkdir -p /var/log/logstash
mkdir -p /etc/logstash/conf.d/
mkdir -p /etc/logstash/optional/
chown -R 1000:1000 /nsm/logstash
chown -R 1000:1000 /var/log/logstash
cp -av $REPO/configfiles/*.conf /etc/logstash/conf.d/
cp -av $REPO/configfiles-setup_required/8*_postprocess_dns_alexa_tagging.conf /etc/logstash/optional/
cp -av $REPO/configfiles-setup_required/85*_postprocess_freq_analysis_*.conf /etc/logstash/optional/
cp -av $REPO/configfiles/*.conf /etc/logstash/conf.d/
cp -av $REPO/etc/logstash/* /etc/logstash/
cp -av $REPO/lib/dictionaries /lib/
#cp -rf $REPO/grok-patterns /lib/
echo "Done!"

header "Configuring Kibana"
mkdir -p /etc/kibana
mkdir -p /var/log/kibana
chown -R 1000:1000 /etc/kibana
chown -R 1000:1000 /var/log/kibana
cp -av $REPO/etc/kibana/* /etc/kibana/
echo "Done!"

header "Configuring Elastalert"
mkdir -p /etc/elastalert/rules
mkdir -p /var/log/elastalert
chown -R 1000:1000 /etc/elastalert/rules
chown -R 1000:1000 /var/log/elastalert
cp -av $REPO/etc/elastalert/rules/* /etc/elastalert/rules/
echo "Done!"

header "Configuring Curator"
mkdir -p /etc/curator/config
mkdir -p /etc/curator/action
mkdir -p /var/log/curator
chown -R 1000:1000 /etc/curator
chown -R 1000:1000 /var/log/curator
cp -av $REPO/etc/curator/config/* /etc/curator/config/
cp -av $REPO/etc/curator/action/* /etc/curator/action/
cp -av $REPO/etc/curator/cron.d/* /etc/cron.d/
echo "Done!"

header "Configuring freq_server"
mkdir -p /var/log/freq_server
mkdir -p /var/log/freq_server_dns
chown -R 1000:1000 /var/log/freq_server
echo "Done!"

header "Configuring domain_stats"
mkdir -p /var/log/domain_stats
mkdir -p /var/log/domain_stats
chown -R 1000:1000 /var/log/domain_stats
echo "Done!"

header "Starting Elastic Stack"
cat << EOF >> /etc/nsm/securityonion.conf

# Docker options
DOCKERHUB="$DOCKERHUB"

# Elasticsearch options
ELASTICSEARCH_ENABLED="yes"
ELASTICSEARCH_HEAP="600m"
ELASTICSEARCH_OPTIONS=""

# Logstash options
LOGSTASH_ENABLED="yes"
LOGSTASH_HEAP="1g"
LOGSTASH_OPTIONS=""

# Kibana options
KIBANA_ENABLED="yes"
KIBANA_DEFAULTAPPID="dashboard/94b52620-342a-11e7-9d52-4f090484f59e"
KIBANA_OPTIONS=""

# ElastAlert options
ELASTALERT_ENABLED="yes"
ELASTALERT_OPTIONS=""

# Curator options
CURATOR_ENABLED="yes"
CURATOR_OPTIONS=""

#Freq_server default options
FREQ_SERVER_ENABLED="yes"
FREQ_SERVER_OPTIONS=""

#Domain_stats options
DOMAIN_STATS_ENABLED="yes"
DOMAIN_STATS_OPTIONS=""
EOF

chmod +x /usr/sbin/so-elastic-*
/usr/sbin/so-elastic-start
echo "Done!"

header "Configuring Elastic Stack to start on boot"
cp $REPO/etc/init/securityonion.conf /etc/init/securityonion.conf
echo "Done!"

header "Configuring Apache"
cp -av $REPO/etc/apache2/sites-available/securityonion.conf /etc/apache2/sites-available/
cp -av $REPO/var/www/so/* /var/www/so/
a2enmod auth_form
a2enmod request
a2enmod session_cookie
a2enmod session_crypto
FILE="/etc/apache2/session"
LC_ALL=C </dev/urandom tr -dc '[:alnum:]' | head -c 64 >> $FILE
chown www-data:www-data $FILE
chmod 660 $FILE
ln -s ssl-cert-snakeoil.pem /etc/ssl/certs/securityonion.pem
ln -s ssl-cert-snakeoil.key /etc/ssl/private/securityonion.key
a2dissite elsa
a2dismod perl
# Remove ELSA link from Squert
mysql --defaults-file=/etc/mysql/debian.cnf -Dsecurityonion_db -e 'delete from filters where alias="ELSA";'
# Add Elastic link to Squert
MYSQL="mysql --defaults-file=/etc/mysql/debian.cnf -Dsecurityonion_db -e"
ALIAS="Kibana"
HEXALIAS=$(xxd -pu -c 256 <<< "$ALIAS")
#URL="/app/kibana#/discover?_g=(refreshInterval:(display:Off,pause:!f,value:0),time:(from:now-7d,mode:quick,to:now))&_a=(columns:!(_source),index:'logstash-*',interval:auto,query:'\${var}',sort:!('@timestamp',desc))"
#HEXURL=$(xxd -pu -c 256 <<< "$URL")
URL="/app/kibana#/dashboard/68563ed0-34bf-11e7-9b32-bb903919ead9?_g=(refreshInterval:(display:Off,pause:!f,value:0),time:(from:now-5y,mode:quick,to:now))&_a=(columns:!(_source),index:'logstash-*',interval:auto,query:(query_string:(analyze_wildcard:!t,query:'\"\${var}\"')),sort:!('@timestamp',desc))"
HEXURL=$(xxd -pu -c 356 <<< "$URL")
$MYSQL "REPLACE INTO filters (type,username,global,name,notes,alias,filter) VALUES ('url','','1','$HEXALIAS','','$ALIAS','$HEXURL');"
service apache2 restart
echo "Done!"

header "Disabling ELSA"
rm -f /etc/cron.d/elsa
FILE="/etc/nsm/securityonion.conf"
sed -i 's/ELSA=YES/ELSA=NO/' $FILE
service sphinxsearch stop
echo "manual" > /etc/init/sphinxsearch.conf.override
sed -i 's|ELSA|Kibana|g' /usr/bin/sguil.tk
sed -i 's|elsa|kibana|g' /usr/bin/sguil.tk
sed -i 's|ELSA|Kibana|g' /usr/lib/sguil/extdata.tcl 
sed -i "s|elsa-query/?query_string=\"\$ipAddr\"%20groupby:program|app/kibana#/dashboard/68563ed0-34bf-11e7-9b32-bb903919ead9?_g=(refreshInterval:(display:Off,pause:!f,value:0),time:(from:now-5y,mode:quick,to:now))\&_a=(columns:!(_source),index:'logstash-*',interval:auto,query:(query_string:(analyze_wildcard:!t,query:'\"\$ipAddr\"')),sort:!('@timestamp',desc))|g" /usr/lib/sguil/extdata.tcl
echo "Done!"

header "Replacing ELSA shortcuts with Kibana shortcuts"
for i in /home/*/Desktop /etc/skel/Desktop /usr/share/applications; do
	echo "Checking $i"
	ELSA="$i/securityonion-elsa.desktop"
	KIBANA="$i/securityonion-kibana.desktop"
	if [ -f $ELSA ]; then
		echo "Renaming $ELSA to $KIBANA"
		mv $ELSA $KIBANA
		echo "Updating $KIBANA"
		sed -i 's|Name=ELSA|Name=Kibana|g' $KIBANA
		sed -i 's|https://localhost/elsa|https://localhost/app/kibana|g' $KIBANA
	fi
done
echo "Done!"

header "Reconfiguring syslog-ng to send logs to Elastic"
FILE="/etc/syslog-ng/syslog-ng.conf"
cp $FILE $FILE.bak
sed -i '/^destination d_elsa/a destination d_logstash { tcp("127.0.0.1" port(6050) template("$(format-json --scope selected_macros --scope nv_pairs --exclude DATE --key ISODATE)\\n")); };' $FILE
sed -i 's/log { destination(d_elsa); };/log { destination(d_logstash); };/' $FILE
sed -i '/rewrite(r_host);/d' $FILE
sed -i '/rewrite(r_cisco_program);/d' $FILE
sed -i '/rewrite(r_snare);/d' $FILE
sed -i '/rewrite(r_from_pipes);/d' $FILE
sed -i '/rewrite(r_pipes);/d' $FILE
sed -i '/parser(p_db);/d' $FILE
sed -i '/rewrite(r_extracted_host);/d' $FILE
sed -i '/^source s_bro_sip/a source s_bro_dce_rpc { file("/nsm/bro/logs/current/dce_rpc.log" flags(no-parse) program_override("bro_dce_rpc")); };' $FILE
sed -i '/^source s_bro_sip/a source s_bro_ntlm { file("/nsm/bro/logs/current/ntlm.log" flags(no-parse) program_override("bro_ntlm")); };' $FILE
sed -i '/^source s_bro_sip/a source s_bro_smb_files { file("/nsm/bro/logs/current/smb_files.log" flags(no-parse) program_override("bro_smb_files")); };' $FILE
sed -i '/^source s_bro_sip/a source s_bro_smb_mapping { file("/nsm/bro/logs/current/smb_mapping.log" flags(no-parse) program_override("bro_smb_mapping")); };' $FILE
sed -i '/source(s_bro_ssh);/a \\tsource(s_bro_dce_rpc);' $FILE
sed -i '/source(s_bro_ssh);/a \\tsource(s_bro_ntlm);' $FILE
sed -i '/source(s_bro_ssh);/a \\tsource(s_bro_smb_files);' $FILE
sed -i '/source(s_bro_ssh);/a \\tsource(s_bro_smb_mapping);' $FILE
service syslog-ng restart
echo "Done!"

header "Updating OSSEC rules"
cp $REPO/var/ossec/rules/securityonion_rules.xml /var/ossec/rules/
chown root:ossec /var/ossec/rules/securityonion_rules.xml
chmod 660 /var/ossec/rules/securityonion_rules.xml
service ossec-hids-server restart
echo "Done!"

header "Configuring Bro to log SMB traffic"
sed -i 's|# @load policy/protocols/smb|@load policy/protocols/smb|g' /opt/bro/share/bro/site/local.bro
/usr/sbin/nsm_sensor_ps-restart --only-bro
echo "Done!"

header "Configuring Kibana"
max_wait=240
es_host=localhost
es_port=9200
kibana_index=.kibana
kibana_version=5.5.0
#kibana_build=$(jq -r '.build.number' < /opt/kibana/package.json )
until curl -s -XGET http://${es_host}:${es_port}/_cluster/health > /dev/null ; do
    wait_step=$(( ${wait_step} + 1 ))
    if [ ${wait_step} -gt ${max_wait} ]; then
        echo "ERROR: elasticsearch server not available for more than ${max_wait} seconds."
        exit 5
    fi
    sleep 1s;
done
curl -s -XDELETE http://${es_host}:${es_port}/${kibana_index}/config/${kibana_version}
curl -s -XDELETE http://${es_host}:${es_port}/${kibana_index}
curl -XPUT http://${es_host}:${es_port}/_template/kibana -d'{"template" : ".kibana", "settings": { "number_of_shards" : 1, "number_of_replicas" : 0 }, "mappings" : { "search": {"properties": {"hits": {"type": "integer"}, "version": {"type": "integer"}}}}}'
curl -XPUT http://${es_host}:${es_port}/_template/elastalert -d'{"template" : "elastalert_status", "settings": { "number_of_shards" : 1, "number_of_replicas" : 0 }, "mappings" : { "search": {"properties": {"hits": {"type": "integer"}, "version": {"type": "integer"}}}}}'
curl -XPUT http://${es_host}:${es_port}/${kibana_index}/config/${kibana_version} -d@$REPO/kibana/config.json; echo; echo
cd $DIR/$REPO/kibana/dashboards/
sh load.sh
cd $DIR
echo "Done!"
